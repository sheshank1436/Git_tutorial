Git has 3 stage architecture:
-working directory-->staging area-->repository

.git:
.git stores all the information about the version control
pwd:
pwd is used to know the present working directory

ls:
ls is used to list the contents of the directory

git status:
git status is used to check the status of the present directory whether the present directory is a repo or not.

git init:
 it is used to initialize the present directory as the git repo.

git add:
 git add is used for two purposes:
  git add --a is used to add the untracked files or newly added files into the staging area.
  git add filename is used to turn a modified file to unmodified version in other words this command will help the modified file 
  to send the changes init to staging area.
git commit:
 Commits are created with the git commit command to capture the state of a project at that point in time.
 The git commit command captures a snapshot of the project's currently staged changes. Committed snapshots 
 can be thought of as “safe” versions of a project—Git will never change them unless you explicitly ask it to.
 git commit -m "message" is used to commit with a message.

git log:
 git log is used to see all the history of commits which we did.

how to delete the present folder as a repo?
 rm -f .git will remove the present directory as a repo and the folder will not be tracked anymore.

git clone:
git clone "link" is used to get all the contents from link and will be downloaded into the present folder.

.gitignore:
 The .gitignore file is a text file that tells Git which files or folders to ignore in a project.
 suppose you have some files in the folder which shouldn't be tracked but git then that file name should be .gitignore file in the folder.
 A local .gitignore file is usually placed in the root directory of a project. 
 You can also create a global .gitignore file and any entries in that file will be ignored in all of your Git repositories.
 we can create .gitignore in the present directory by using touch .gitignore
 suppose you have file name  error.log which shouldn't be tracked add error.log to the .gitignore file and that file wont be tracked
 suppose you have a directory with name dir which shouldn't be tracked add dir/ to the .gitignore file and that folder wont be tracked.
 suppose in  dir you only want dir to be untracked and you want its sub dir to be tracked then use \dir\  to the .gitignore file and
 that folder wont be tracked
 To create a local .gitignore file, create a text file and name it .gitignore (remember to include the . at the beginning). 2
 Then edit this file as needed. Each new line should list an additional file or folder that you want Git to ignore.

 The entries in this file can also follow a matching pattern.

 	* is used as a wildcard match.
	 / is used to ignore pathnames relative to the .gitignore file.
	 # is used to add comments to a .gitignore file.
suppose if we have done changes in  a file and loaded them to staging area using git add --a then before commiting if we again did some changes
in the same file.
after doing the changes again and checking the git status we can see the same file in modified and as well as staging area.
the staging area consists of the previous version data.
the modified consits of new version file.

git diff:
used to compare staging area and the present  working dir files.
if you do changes in the file after sending it to staging area then git diff will show two versions 
if both the files has some changed data then it will show both versions.